// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: logic/logic.proto

package chat

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UIDReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UIDReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UIDReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UIDReqMultiError, or nil if none found.
func (m *UIDReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UIDReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UIDReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UIDReqMultiError(errors)
	}
	return nil
}

// UIDReqMultiError is an error wrapping multiple validation errors returned by
// UIDReq.ValidateAll() if the designated constraints aren't met.
type UIDReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UIDReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UIDReqMultiError) AllErrors() []error { return m }

// UIDReqValidationError is the validation error returned by UIDReq.Validate if
// the designated constraints aren't met.
type UIDReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UIDReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UIDReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UIDReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UIDReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UIDReqValidationError) ErrorName() string { return "UIDReqValidationError" }

// Error satisfies the builtin error interface
func (e UIDReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUIDReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UIDReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UIDReqValidationError{}

// Validate checks the field values on UIDsReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UIDsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UIDsReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UIDsReqMultiError, or nil if none found.
func (m *UIDsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UIDsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := UIDsReqValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UIDsReqMultiError(errors)
	}
	return nil
}

// UIDsReqMultiError is an error wrapping multiple validation errors returned
// by UIDsReq.ValidateAll() if the designated constraints aren't met.
type UIDsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UIDsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UIDsReqMultiError) AllErrors() []error { return m }

// UIDsReqValidationError is the validation error returned by UIDsReq.Validate
// if the designated constraints aren't met.
type UIDsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UIDsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UIDsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UIDsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UIDsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UIDsReqValidationError) ErrorName() string { return "UIDsReqValidationError" }

// Error satisfies the builtin error interface
func (e UIDsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUIDsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UIDsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UIDsReqValidationError{}

// Validate checks the field values on OnlineReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OnlineReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlineReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OnlineReqMultiError, or nil
// if none found.
func (m *OnlineReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlineReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServerId()) < 3 {
		err := OnlineReqValidationError{
			field:  "ServerId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetToken()) < 3 {
		err := OnlineReqValidationError{
			field:  "Token",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OnlineReqMultiError(errors)
	}
	return nil
}

// OnlineReqMultiError is an error wrapping multiple validation errors returned
// by OnlineReq.ValidateAll() if the designated constraints aren't met.
type OnlineReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlineReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlineReqMultiError) AllErrors() []error { return m }

// OnlineReqValidationError is the validation error returned by
// OnlineReq.Validate if the designated constraints aren't met.
type OnlineReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlineReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlineReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlineReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlineReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlineReqValidationError) ErrorName() string { return "OnlineReqValidationError" }

// Error satisfies the builtin error interface
func (e OnlineReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlineReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlineReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlineReqValidationError{}

// Validate checks the field values on OnlineReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OnlineReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlineReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OnlineReplyMultiError, or
// nil if none found.
func (m *OnlineReply) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlineReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Key

	if len(errors) > 0 {
		return OnlineReplyMultiError(errors)
	}
	return nil
}

// OnlineReplyMultiError is an error wrapping multiple validation errors
// returned by OnlineReply.ValidateAll() if the designated constraints aren't met.
type OnlineReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlineReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlineReplyMultiError) AllErrors() []error { return m }

// OnlineReplyValidationError is the validation error returned by
// OnlineReply.Validate if the designated constraints aren't met.
type OnlineReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlineReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlineReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlineReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlineReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlineReplyValidationError) ErrorName() string { return "OnlineReplyValidationError" }

// Error satisfies the builtin error interface
func (e OnlineReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlineReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlineReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlineReplyValidationError{}

// Validate checks the field values on OfflineReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OfflineReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OfflineReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OfflineReqMultiError, or
// nil if none found.
func (m *OfflineReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OfflineReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := OfflineReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Key

	if utf8.RuneCountInString(m.GetServerId()) < 3 {
		err := OfflineReqValidationError{
			field:  "ServerId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OfflineReqMultiError(errors)
	}
	return nil
}

// OfflineReqMultiError is an error wrapping multiple validation errors
// returned by OfflineReq.ValidateAll() if the designated constraints aren't met.
type OfflineReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfflineReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfflineReqMultiError) AllErrors() []error { return m }

// OfflineReqValidationError is the validation error returned by
// OfflineReq.Validate if the designated constraints aren't met.
type OfflineReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfflineReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfflineReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfflineReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfflineReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfflineReqValidationError) ErrorName() string { return "OfflineReqValidationError" }

// Error satisfies the builtin error interface
func (e OfflineReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfflineReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfflineReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfflineReqValidationError{}

// Validate checks the field values on ServerIDReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerIDReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerIDReplyMultiError, or
// nil if none found.
func (m *ServerIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerId

	if len(errors) > 0 {
		return ServerIDReplyMultiError(errors)
	}
	return nil
}

// ServerIDReplyMultiError is an error wrapping multiple validation errors
// returned by ServerIDReply.ValidateAll() if the designated constraints
// aren't met.
type ServerIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerIDReplyMultiError) AllErrors() []error { return m }

// ServerIDReplyValidationError is the validation error returned by
// ServerIDReply.Validate if the designated constraints aren't met.
type ServerIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerIDReplyValidationError) ErrorName() string { return "ServerIDReplyValidationError" }

// Error satisfies the builtin error interface
func (e ServerIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerIDReplyValidationError{}

// Validate checks the field values on ServerIDsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerIDsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerIDsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerIDsReplyMultiError,
// or nil if none found.
func (m *ServerIDsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerIDsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerIDsReplyMultiError(errors)
	}
	return nil
}

// ServerIDsReplyMultiError is an error wrapping multiple validation errors
// returned by ServerIDsReply.ValidateAll() if the designated constraints
// aren't met.
type ServerIDsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerIDsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerIDsReplyMultiError) AllErrors() []error { return m }

// ServerIDsReplyValidationError is the validation error returned by
// ServerIDsReply.Validate if the designated constraints aren't met.
type ServerIDsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerIDsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerIDsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerIDsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerIDsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerIDsReplyValidationError) ErrorName() string { return "ServerIDsReplyValidationError" }

// Error satisfies the builtin error interface
func (e ServerIDsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerIDsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerIDsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerIDsReplyValidationError{}
