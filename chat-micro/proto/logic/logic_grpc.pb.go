// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogicClient is the client API for Logic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogicClient interface {
	// 用户上线，建立长连接
	Online(ctx context.Context, in *OnlineReq, opts ...grpc.CallOption) (*OnlineReply, error)
	// 用户下线
	Offline(ctx context.Context, in *OfflineReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取用户长连接所在的服务器ID
	ServerByUserID(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*ServerIDReply, error)
	// 批量获取长连接所在的服务器ID
	BatchServersByUserIDs(ctx context.Context, in *UIDsReq, opts ...grpc.CallOption) (*ServerIDsReply, error)
}

type logicClient struct {
	cc grpc.ClientConnInterface
}

func NewLogicClient(cc grpc.ClientConnInterface) LogicClient {
	return &logicClient{cc}
}

func (c *logicClient) Online(ctx context.Context, in *OnlineReq, opts ...grpc.CallOption) (*OnlineReply, error) {
	out := new(OnlineReply)
	err := c.cc.Invoke(ctx, "/logic.Logic/Online", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) Offline(ctx context.Context, in *OfflineReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logic.Logic/Offline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) ServerByUserID(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*ServerIDReply, error) {
	out := new(ServerIDReply)
	err := c.cc.Invoke(ctx, "/logic.Logic/ServerByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) BatchServersByUserIDs(ctx context.Context, in *UIDsReq, opts ...grpc.CallOption) (*ServerIDsReply, error) {
	out := new(ServerIDsReply)
	err := c.cc.Invoke(ctx, "/logic.Logic/BatchServersByUserIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogicServer is the server API for Logic service.
// All implementations must embed UnimplementedLogicServer
// for forward compatibility
type LogicServer interface {
	// 用户上线，建立长连接
	Online(context.Context, *OnlineReq) (*OnlineReply, error)
	// 用户下线
	Offline(context.Context, *OfflineReq) (*emptypb.Empty, error)
	// 获取用户长连接所在的服务器ID
	ServerByUserID(context.Context, *UIDReq) (*ServerIDReply, error)
	// 批量获取长连接所在的服务器ID
	BatchServersByUserIDs(context.Context, *UIDsReq) (*ServerIDsReply, error)
	mustEmbedUnimplementedLogicServer()
}

// UnimplementedLogicServer must be embedded to have forward compatible implementations.
type UnimplementedLogicServer struct {
}

func (UnimplementedLogicServer) Online(context.Context, *OnlineReq) (*OnlineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Online not implemented")
}
func (UnimplementedLogicServer) Offline(context.Context, *OfflineReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Offline not implemented")
}
func (UnimplementedLogicServer) ServerByUserID(context.Context, *UIDReq) (*ServerIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerByUserID not implemented")
}
func (UnimplementedLogicServer) BatchServersByUserIDs(context.Context, *UIDsReq) (*ServerIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchServersByUserIDs not implemented")
}
func (UnimplementedLogicServer) mustEmbedUnimplementedLogicServer() {}

// UnsafeLogicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogicServer will
// result in compilation errors.
type UnsafeLogicServer interface {
	mustEmbedUnimplementedLogicServer()
}

func RegisterLogicServer(s grpc.ServiceRegistrar, srv LogicServer) {
	s.RegisterService(&Logic_ServiceDesc, srv)
}

func _Logic_Online_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Online(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.Logic/Online",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Online(ctx, req.(*OnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_Offline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Offline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.Logic/Offline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Offline(ctx, req.(*OfflineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_ServerByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).ServerByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.Logic/ServerByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).ServerByUserID(ctx, req.(*UIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_BatchServersByUserIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).BatchServersByUserIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.Logic/BatchServersByUserIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).BatchServersByUserIDs(ctx, req.(*UIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Logic_ServiceDesc is the grpc.ServiceDesc for Logic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logic.Logic",
	HandlerType: (*LogicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Online",
			Handler:    _Logic_Online_Handler,
		},
		{
			MethodName: "Offline",
			Handler:    _Logic_Offline_Handler,
		},
		{
			MethodName: "ServerByUserID",
			Handler:    _Logic_ServerByUserID_Handler,
		},
		{
			MethodName: "BatchServersByUserIDs",
			Handler:    _Logic_BatchServersByUserIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logic/logic.proto",
}
