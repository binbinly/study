// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: task/task.proto

package chat

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MessageMultiError, or nil if none found.
func (m *Message) ValidateAll() error {
	return m.validate(true)
}

func (m *Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Server

	// no validation rules for Event

	// no validation rules for Body

	if len(errors) > 0 {
		return MessageMultiError(errors)
	}
	return nil
}

// MessageMultiError is an error wrapping multiple validation errors returned
// by Message.ValidateAll() if the designated constraints aren't met.
type MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMultiError) AllErrors() []error { return m }

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on Chat with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Chat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Chat with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChatMultiError, or nil if none found.
func (m *Chat) ValidateAll() error {
	return m.validate(true)
}

func (m *Chat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ChatType

	// no validation rules for Type

	// no validation rules for Options

	// no validation rules for Content

	// no validation rules for T

	if len(errors) > 0 {
		return ChatMultiError(errors)
	}
	return nil
}

// ChatMultiError is an error wrapping multiple validation errors returned by
// Chat.ValidateAll() if the designated constraints aren't met.
type ChatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMultiError) AllErrors() []error { return m }

// ChatValidationError is the validation error returned by Chat.Validate if the
// designated constraints aren't met.
type ChatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatValidationError) ErrorName() string { return "ChatValidationError" }

// Error satisfies the builtin error interface
func (e ChatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatValidationError{}

// Validate checks the field values on Recall with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Recall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Recall with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RecallMultiError, or nil if none found.
func (m *Recall) ValidateAll() error {
	return m.validate(true)
}

func (m *Recall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FromId

	// no validation rules for ToId

	// no validation rules for ChatType

	if len(errors) > 0 {
		return RecallMultiError(errors)
	}
	return nil
}

// RecallMultiError is an error wrapping multiple validation errors returned by
// Recall.ValidateAll() if the designated constraints aren't met.
type RecallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecallMultiError) AllErrors() []error { return m }

// RecallValidationError is the validation error returned by Recall.Validate if
// the designated constraints aren't met.
type RecallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecallValidationError) ErrorName() string { return "RecallValidationError" }

// Error satisfies the builtin error interface
func (e RecallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecallValidationError{}

// Validate checks the field values on Notify with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Notify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Notify with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NotifyMultiError, or nil if none found.
func (m *Notify) ValidateAll() error {
	return m.validate(true)
}

func (m *Notify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return NotifyMultiError(errors)
	}
	return nil
}

// NotifyMultiError is an error wrapping multiple validation errors returned by
// Notify.ValidateAll() if the designated constraints aren't met.
type NotifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyMultiError) AllErrors() []error { return m }

// NotifyValidationError is the validation error returned by Notify.Validate if
// the designated constraints aren't met.
type NotifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyValidationError) ErrorName() string { return "NotifyValidationError" }

// Error satisfies the builtin error interface
func (e NotifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyValidationError{}

// Validate checks the field values on Moment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Moment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Moment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MomentMultiError, or nil if none found.
func (m *Moment) ValidateAll() error {
	return m.validate(true)
}

func (m *Moment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Avatar

	// no validation rules for Type

	if len(errors) > 0 {
		return MomentMultiError(errors)
	}
	return nil
}

// MomentMultiError is an error wrapping multiple validation errors returned by
// Moment.ValidateAll() if the designated constraints aren't met.
type MomentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MomentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MomentMultiError) AllErrors() []error { return m }

// MomentValidationError is the validation error returned by Moment.Validate if
// the designated constraints aren't met.
type MomentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MomentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MomentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MomentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MomentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MomentValidationError) ErrorName() string { return "MomentValidationError" }

// Error satisfies the builtin error interface
func (e MomentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MomentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MomentValidationError{}

// Validate checks the field values on Sender with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Sender) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sender with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SenderMultiError, or nil if none found.
func (m *Sender) ValidateAll() error {
	return m.validate(true)
}

func (m *Sender) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Avatar

	if len(errors) > 0 {
		return SenderMultiError(errors)
	}
	return nil
}

// SenderMultiError is an error wrapping multiple validation errors returned by
// Sender.ValidateAll() if the designated constraints aren't met.
type SenderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SenderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SenderMultiError) AllErrors() []error { return m }

// SenderValidationError is the validation error returned by Sender.Validate if
// the designated constraints aren't met.
type SenderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SenderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SenderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SenderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SenderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SenderValidationError) ErrorName() string { return "SenderValidationError" }

// Error satisfies the builtin error interface
func (e SenderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSender.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SenderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SenderValidationError{}
