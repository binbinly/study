app:
  Name: center
  Host: 127.0.0.1
  ServerID: center-1  #服务器id必须唯一，多开时，默认生成随机唯一码
  JwtSecret: Your-Jwt-Secret
  JwtTimeout: 86400           # jwt有效时间, 单位秒
sms:
  IsReal: false #是否真实发送短信
logger:
  Development: false
  DisableCaller: false
  Encoding: json                          # json or console
  Level: INFO                             # 日志级别，DEBUG, INFO, WARN, ERROR, FATAL
  Name: center                            # 应用名称
  Writers: file                           # 有2个可选项：file,console 选择file会将日志记录到logger_file指定的日志文件中，选择console会将日志输出到标准输出，当然也可以两者同时选择
  LoggerFile: ./logs/center.log           # 日志文件
  LoggerWarnFile: ./logs/center.warn.log
  LoggerErrorFile: ./logs/center.err.log
mysql:
  Name: center                     # 数据库名称
  Addr: 127.0.0.1:3306             # 如果是 docker,可以替换为 对应的服务名称，eg: db:3306
  UserName: root
  Password: 123456
  TablePrefix: ""                   # 表前缀
  Debug: true                       # 是否开启调试，打印所有sql
  MaxIdleConn: 10                   # 最大闲置的连接数，0意味着使用默认的大小2， 小于0表示不使用连接池
  MaxOpenConn: 100                  # 最大打开的连接数, 需要小于数据库配置中的max_connections数
  ConnMaxLifeTime: 60m              # 单个连接最大存活时间，建议设置比数据库超时时长(wait_timeout)稍小一些
redis:
  Addr: 127.0.0.1:6379
  Password: ""
  DB: 0
  MinIdleConn: 30
  DialTimeout: 60s
  ReadTimeout: 500ms
  WriteTimeout: 500ms
  PoolSize: 500
  PoolTimeout: 240
queue:
  Plugin: redis      # select: redis nsq rabbitmq
  Channel: message
  Nsq:
    ProdHost: 127.0.0.1:4150
    Topic: message
    Channel: message
    MaxAttempts: 3
  Rabbitmq:
    Addr: 'guest:guest@localhost:5672/'
    QueueName: message
grpcServer:
  Network: tcp
  Port: 20001
  QPSLimit: 100
  Timeout: 5s #处理超时
  IdleTimeout: 15s        #如果客户端闲置 x 秒，发送GOAWAY
  MaxLifeTime: 30s        #如果任何连接仍然存在超过 x 秒，发送GOAWAY
  ForceCloseWait: 5s      #在强行关闭连接之前，等待 x 秒钟，以使挂起的RPC完成
  KeepAliveInterval: 5s   #如果客户端闲置 x 秒钟，对其进行ping操作，以确保连接仍处于活动状态
  KeepAliveTimeout: 1s    #假设连接中断，等待 x 秒钟以进行ping确认
grpcClient:
  ServiceName: center
  Timeout: 5s
  QPSLimit: 100
  KeepAliveTime: 15s
  KeepAliveTimeout: 1s
registry:
  Name: consul
  Host: 127.0.0.1:8500
trace:
  # trace config
  TraceAgent: jaeger
  Enable: false
  Zipkin:
    HTTPEndpoint: "http://127.0.0.1:9411/api/v2/spans"
    SameSpan: false
    ID128Bit: true
    SampleRate: "1.0"
  Jaeger:
    SamplingServerURL: "http://127.0.0.1:5778/sampling"
    SamplingType: const
    SamplingParam: "1.0"
    LocalAgentHostPort: "127.0.0.1:6831"
    Propagation: "jaeger"
    Gen128Bit: true
    TraceContextHeaderName: "uber-trace-id"
    CollectorEndpoint: ""
    CollectorUser: ""
    CollectorPassword: ""
  # Elastic, only useful when TraceAgent is elastic
  Elastic:
    ServerURL: "http://127.0.0.1:8200"
    SecretToken: ""