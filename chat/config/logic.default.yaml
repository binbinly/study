app:
  Name: logic
  Host: 127.0.0.1
  ServerId: 1  #服务器id必须唯一，多开时，默认生成随机唯一码
  PprofPort: :5555
  Mode: debug                 # 开发模式, debug, release, test
  JwtSecret: Your-Jwt-Secret
  JwtTimeout: 86400           # jwt有效时间, 单位秒
  CtxDefaultTimeout: 12s
  Debug: true
Http:
  Port: 9050
  ReadTimeout: 5s
  WriteTimeout: 5s
logger:
  Development: false
  DisableCaller: false
  DisableStacktrace: false
  Encoding: json                          # json or console
  Level: INFO                             # 日志级别，DEBUG, INFO, WARN, ERROR, FATAL
  Name: chat                              # 应用名称
  Writers: console                        # 有2个可选项：file,console 选择file会将日志记录到logger_file指定的日志文件中，选择console会将日志输出到标准输出，当然也可以两者同时选择
  LoggerFile: ./logs/chat.log   # 日志文件
  LoggerWarnFile: ./logs/chat.wf.log
  LoggerErrorFile: ./logs/chat.err.log
  LogRollingPolicy: daily         # rotate依据，可选的有：daily, hourly。如果选daily(默认)则根据天进行转存，如果是hourly则根据小时进行转存
  LogRotateDate: 1                # rotate转存时间，配合rollingPolicy: daily使用
  LogRotateSize: 1                # rotate转存大小，配合rollingPolicy: size使用
  LogBackupCount: 7               # 当日志文件达到转存标准时，log系统会将该日志文件进行压缩备份，这里指定了备份文件的最大个数。
mysql:
  Name: chat                     # 数据库名称
  Addr: 127.0.0.1:3306            # 如果是 docker,可以替换为 对应的服务名称，eg: db:3306
  UserName: root
  Password: 123456
  TablePrefix: ""                # 表前缀
  ShowLog: true                   # 是否打印SQL日志
  MaxIdleConn: 10                 # 最大闲置的连接数，0意味着使用默认的大小2， 小于0表示不使用连接池
  MaxOpenConn: 100                 # 最大打开的连接数, 需要小于数据库配置中的max_connections数
  ConnMaxLifeTime: 60m            # 单个连接最大存活时间，建议设置比数据库超时时长(wait_timeout)稍小一些
redis:
  Addr: 127.0.0.1:6379
  Password: ""
  DB: 0
  MinIdleConn: 30
  DialTimeout: 60s
  ReadTimeout: 500ms
  WriteTimeout: 500ms
  PoolSize: 500
  PoolTimeout: 240
queue:
  Plugin: redis
  Channel: message
  Nsq:
    ProdHost: 127.0.0.1:4150
    Topic: message
    Channel: message
    MaxAttempts: 3
  Rabbitmq:
    Addr: 'guest:guest@localhost:5672/'
    QueueName: message
grpcServer:
  Network: tcp
  Port: 20007
  Timeout: 5s #处理超时
  IdleTimeout: 15s    #如果客户端闲置 x 秒，发送GOAWAY
  MaxLifeTime: 30s    #如果任何连接仍然存在超过 x 秒，发送GOAWAY
  ForceCloseWait: 5s #在强行关闭连接之前，等待 x 秒钟，以使挂起的RPC完成
  KeepAliveInterval: 5s #如果客户端闲置 x 秒钟，对其进行ping操作，以确保连接仍处于活动状态
  KeepAliveTimeout: 1s #假设连接中断，等待 x 秒钟以进行ping确认
grpcClient:
  Timeout: 5s
  KeepAliveTime: 15s
  KeepAliveTimeout: 1s
registry:
  Name: consul
  Host: 127.0.0.1:8500
jaeger:
  Host: 127.0.0.1:6831
  ServiceName: REST_API
  LogSpans: false