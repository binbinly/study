// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: center/center.proto

package center

import (
	base "chat/proto/base"
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Phone    int64  `protobuf:"varint,3,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *RegisterReq) Reset() {
	*x = RegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReq) ProtoMessage() {}

func (x *RegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReq.ProtoReflect.Descriptor instead.
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegisterReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegisterReq) GetPhone() int64 {
	if x != nil {
		return x.Phone
	}
	return 0
}

type RegisterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RegisterReply) Reset() {
	*x = RegisterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReply) ProtoMessage() {}

func (x *RegisterReply) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReply.ProtoReflect.Descriptor instead.
func (*RegisterReply) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterReply) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UsernameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *UsernameReq) Reset() {
	*x = UsernameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsernameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernameReq) ProtoMessage() {}

func (x *UsernameReq) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernameReq.ProtoReflect.Descriptor instead.
func (*UsernameReq) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{2}
}

func (x *UsernameReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UsernameReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type UserToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User  *base.UserInfo `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Token string         `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UserToken) Reset() {
	*x = UserToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserToken) ProtoMessage() {}

func (x *UserToken) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserToken.ProtoReflect.Descriptor instead.
func (*UserToken) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{3}
}

func (x *UserToken) GetUser() *base.UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type PhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone int64 `protobuf:"varint,1,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *PhoneReq) Reset() {
	*x = PhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneReq) ProtoMessage() {}

func (x *PhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneReq.ProtoReflect.Descriptor instead.
func (*PhoneReq) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{4}
}

func (x *PhoneReq) GetPhone() int64 {
	if x != nil {
		return x.Phone
	}
	return 0
}

type UserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Phone    int64  `protobuf:"varint,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar   string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *UserReq) Reset() {
	*x = UserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReq) ProtoMessage() {}

func (x *UserReq) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReq.ProtoReflect.Descriptor instead.
func (*UserReq) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{5}
}

func (x *UserReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserReq) GetPhone() int64 {
	if x != nil {
		return x.Phone
	}
	return 0
}

func (x *UserReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserReq) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

type EditReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *EditReq) Reset() {
	*x = EditReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditReq) ProtoMessage() {}

func (x *EditReq) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditReq.ProtoReflect.Descriptor instead.
func (*EditReq) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{6}
}

func (x *EditReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EditReq) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type EditPwdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pwd string `protobuf:"bytes,2,opt,name=pwd,proto3" json:"pwd,omitempty"`
}

func (x *EditPwdReq) Reset() {
	*x = EditPwdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditPwdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditPwdReq) ProtoMessage() {}

func (x *EditPwdReq) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditPwdReq.ProtoReflect.Descriptor instead.
func (*EditPwdReq) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{7}
}

func (x *EditPwdReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EditPwdReq) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

type UIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UIDReq) Reset() {
	*x = UIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDReq) ProtoMessage() {}

func (x *UIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDReq.ProtoReflect.Descriptor instead.
func (*UIDReq) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{8}
}

func (x *UIDReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UIDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *UIDsReq) Reset() {
	*x = UIDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDsReq) ProtoMessage() {}

func (x *UIDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDsReq.ProtoReflect.Descriptor instead.
func (*UIDsReq) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{9}
}

func (x *UIDsReq) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type OnlineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *OnlineReq) Reset() {
	*x = OnlineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineReq) ProtoMessage() {}

func (x *OnlineReq) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineReq.ProtoReflect.Descriptor instead.
func (*OnlineReq) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{10}
}

func (x *OnlineReq) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *OnlineReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type OnlineReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *OnlineReply) Reset() {
	*x = OnlineReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineReply) ProtoMessage() {}

func (x *OnlineReply) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineReply.ProtoReflect.Descriptor instead.
func (*OnlineReply) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{11}
}

func (x *OnlineReply) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *OnlineReply) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type OfflineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Server string `protobuf:"bytes,3,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *OfflineReq) Reset() {
	*x = OfflineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineReq) ProtoMessage() {}

func (x *OfflineReq) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineReq.ProtoReflect.Descriptor instead.
func (*OfflineReq) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{12}
}

func (x *OfflineReq) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *OfflineReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *OfflineReq) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

type ServerIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
}

func (x *ServerIDReply) Reset() {
	*x = ServerIDReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerIDReply) ProtoMessage() {}

func (x *ServerIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerIDReply.ProtoReflect.Descriptor instead.
func (*ServerIDReply) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{13}
}

func (x *ServerIDReply) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

type ServerIDsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerIDs []string `protobuf:"bytes,1,rep,name=serverIDs,proto3" json:"serverIDs,omitempty"`
}

func (x *ServerIDsReply) Reset() {
	*x = ServerIDsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerIDsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerIDsReply) ProtoMessage() {}

func (x *ServerIDsReply) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerIDsReply.ProtoReflect.Descriptor instead.
func (*ServerIDsReply) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{14}
}

func (x *ServerIDsReply) GetServerIDs() []string {
	if x != nil {
		return x.ServerIDs
	}
	return nil
}

type CheckCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone int64  `protobuf:"varint,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Code  string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *CheckCodeReq) Reset() {
	*x = CheckCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCodeReq) ProtoMessage() {}

func (x *CheckCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCodeReq.ProtoReflect.Descriptor instead.
func (*CheckCodeReq) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{15}
}

func (x *CheckCodeReq) GetPhone() int64 {
	if x != nil {
		return x.Phone
	}
	return 0
}

func (x *CheckCodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type CodeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *CodeReply) Reset() {
	*x = CodeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeReply) ProtoMessage() {}

func (x *CodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeReply.ProtoReflect.Descriptor instead.
func (*CodeReply) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{16}
}

func (x *CodeReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type BoolReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Is bool `protobuf:"varint,1,opt,name=is,proto3" json:"is,omitempty"`
}

func (x *BoolReply) Reset() {
	*x = BoolReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_center_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolReply) ProtoMessage() {}

func (x *BoolReply) ProtoReflect() protoreflect.Message {
	mi := &file_center_center_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolReply.ProtoReflect.Descriptor instead.
func (*BoolReply) Descriptor() ([]byte, []int) {
	return file_center_center_proto_rawDescGZIP(), []int{17}
}

func (x *BoolReply) GetIs() bool {
	if x != nil {
		return x.Is
	}
	return false
}

var File_center_center_proto protoreflect.FileDescriptor

var file_center_center_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x62, 0x61, 0x73, 0x65,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x0b, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x1f, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x45, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x20, 0x0a, 0x08, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x63, 0x0a, 0x07, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x33,
	0x0a, 0x07, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x0a, 0x45, 0x64, 0x69, 0x74, 0x50, 0x77, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x70, 0x77, 0x64, 0x22, 0x18, 0x0a, 0x06, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a,
	0x07, 0x55, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x09, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x31, 0x0a, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x48, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x22, 0x2b, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x2e, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22,
	0x38, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x1f, 0x0a, 0x09, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x1b, 0x0a, 0x09, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x69, 0x73, 0x32, 0x84, 0x06, 0x0a, 0x06, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x13, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37,
	0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x13, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x12, 0x0f, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x39, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x50, 0x77, 0x64, 0x12, 0x12,
	0x2e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x50, 0x77, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x12, 0x0e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x06,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x11, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35,
	0x0a, 0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x0e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40,
	0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x0f, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x55, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2e, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x4d, 0x53, 0x12, 0x10, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3a, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x2e, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x0b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_center_center_proto_rawDescOnce sync.Once
	file_center_center_proto_rawDescData = file_center_center_proto_rawDesc
)

func file_center_center_proto_rawDescGZIP() []byte {
	file_center_center_proto_rawDescOnce.Do(func() {
		file_center_center_proto_rawDescData = protoimpl.X.CompressGZIP(file_center_center_proto_rawDescData)
	})
	return file_center_center_proto_rawDescData
}

var file_center_center_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_center_center_proto_goTypes = []interface{}{
	(*RegisterReq)(nil),    // 0: center.RegisterReq
	(*RegisterReply)(nil),  // 1: center.RegisterReply
	(*UsernameReq)(nil),    // 2: center.UsernameReq
	(*UserToken)(nil),      // 3: center.UserToken
	(*PhoneReq)(nil),       // 4: center.PhoneReq
	(*UserReq)(nil),        // 5: center.UserReq
	(*EditReq)(nil),        // 6: center.EditReq
	(*EditPwdReq)(nil),     // 7: center.EditPwdReq
	(*UIDReq)(nil),         // 8: center.UIDReq
	(*UIDsReq)(nil),        // 9: center.UIDsReq
	(*OnlineReq)(nil),      // 10: center.OnlineReq
	(*OnlineReply)(nil),    // 11: center.OnlineReply
	(*OfflineReq)(nil),     // 12: center.OfflineReq
	(*ServerIDReply)(nil),  // 13: center.ServerIDReply
	(*ServerIDsReply)(nil), // 14: center.ServerIDsReply
	(*CheckCodeReq)(nil),   // 15: center.CheckCodeReq
	(*CodeReply)(nil),      // 16: center.CodeReply
	(*BoolReply)(nil),      // 17: center.BoolReply
	(*base.UserInfo)(nil),  // 18: base.UserInfo
	(*emptypb.Empty)(nil),  // 19: google.protobuf.Empty
}
var file_center_center_proto_depIdxs = []int32{
	18, // 0: center.UserToken.user:type_name -> base.UserInfo
	0,  // 1: center.Center.UserRegister:input_type -> center.RegisterReq
	2,  // 2: center.Center.UsernameLogin:input_type -> center.UsernameReq
	4,  // 3: center.Center.PhoneLogin:input_type -> center.PhoneReq
	6,  // 4: center.Center.UserEdit:input_type -> center.EditReq
	7,  // 5: center.Center.UserEditPwd:input_type -> center.EditPwdReq
	8,  // 6: center.Center.UserInfo:input_type -> center.UIDReq
	8,  // 7: center.Center.UserLogout:input_type -> center.UIDReq
	10, // 8: center.Center.Online:input_type -> center.OnlineReq
	12, // 9: center.Center.Offline:input_type -> center.OfflineReq
	8,  // 10: center.Center.ServerByUserID:input_type -> center.UIDReq
	9,  // 11: center.Center.BatchServersByUserIDs:input_type -> center.UIDsReq
	4,  // 12: center.Center.SendSMS:input_type -> center.PhoneReq
	15, // 13: center.Center.CheckVCode:input_type -> center.CheckCodeReq
	8,  // 14: center.Center.CheckOnline:input_type -> center.UIDReq
	1,  // 15: center.Center.UserRegister:output_type -> center.RegisterReply
	3,  // 16: center.Center.UsernameLogin:output_type -> center.UserToken
	3,  // 17: center.Center.PhoneLogin:output_type -> center.UserToken
	19, // 18: center.Center.UserEdit:output_type -> google.protobuf.Empty
	19, // 19: center.Center.UserEditPwd:output_type -> google.protobuf.Empty
	18, // 20: center.Center.UserInfo:output_type -> base.UserInfo
	19, // 21: center.Center.UserLogout:output_type -> google.protobuf.Empty
	11, // 22: center.Center.Online:output_type -> center.OnlineReply
	19, // 23: center.Center.Offline:output_type -> google.protobuf.Empty
	13, // 24: center.Center.ServerByUserID:output_type -> center.ServerIDReply
	14, // 25: center.Center.BatchServersByUserIDs:output_type -> center.ServerIDsReply
	16, // 26: center.Center.SendSMS:output_type -> center.CodeReply
	19, // 27: center.Center.CheckVCode:output_type -> google.protobuf.Empty
	17, // 28: center.Center.CheckOnline:output_type -> center.BoolReply
	15, // [15:29] is the sub-list for method output_type
	1,  // [1:15] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_center_center_proto_init() }
func file_center_center_proto_init() {
	if File_center_center_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_center_center_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_center_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_center_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsernameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_center_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_center_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_center_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_center_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_center_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditPwdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_center_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_center_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_center_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_center_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_center_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_center_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerIDReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_center_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerIDsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_center_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_center_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_center_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_center_center_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_center_center_proto_goTypes,
		DependencyIndexes: file_center_center_proto_depIdxs,
		MessageInfos:      file_center_center_proto_msgTypes,
	}.Build()
	File_center_center_proto = out.File
	file_center_center_proto_rawDesc = nil
	file_center_center_proto_goTypes = nil
	file_center_center_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CenterClient is the client API for Center service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CenterClient interface {
	// 用户注册
	UserRegister(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error)
	// 用户名密码登录
	UsernameLogin(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*UserToken, error)
	// 手机号登录
	PhoneLogin(ctx context.Context, in *PhoneReq, opts ...grpc.CallOption) (*UserToken, error)
	// 修改用户信息
	UserEdit(ctx context.Context, in *EditReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 修改密码
	UserEditPwd(ctx context.Context, in *EditPwdReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取用户信息
	UserInfo(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*base.UserInfo, error)
	// 用户登出
	UserLogout(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 用户上线，建立长连接
	Online(ctx context.Context, in *OnlineReq, opts ...grpc.CallOption) (*OnlineReply, error)
	// 用户下线
	Offline(ctx context.Context, in *OfflineReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取用户长连接所在的服务器ID
	ServerByUserID(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*ServerIDReply, error)
	// 批量获取长连接所在的服务器ID
	BatchServersByUserIDs(ctx context.Context, in *UIDsReq, opts ...grpc.CallOption) (*ServerIDsReply, error)
	// 发送短信验证码
	SendSMS(ctx context.Context, in *PhoneReq, opts ...grpc.CallOption) (*CodeReply, error)
	// 短信验证码验证
	CheckVCode(ctx context.Context, in *CheckCodeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 检测用户是否在线
	CheckOnline(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*BoolReply, error)
}

type centerClient struct {
	cc grpc.ClientConnInterface
}

func NewCenterClient(cc grpc.ClientConnInterface) CenterClient {
	return &centerClient{cc}
}

func (c *centerClient) UserRegister(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/center.Center/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) UsernameLogin(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*UserToken, error) {
	out := new(UserToken)
	err := c.cc.Invoke(ctx, "/center.Center/UsernameLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) PhoneLogin(ctx context.Context, in *PhoneReq, opts ...grpc.CallOption) (*UserToken, error) {
	out := new(UserToken)
	err := c.cc.Invoke(ctx, "/center.Center/PhoneLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) UserEdit(ctx context.Context, in *EditReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/center.Center/UserEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) UserEditPwd(ctx context.Context, in *EditPwdReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/center.Center/UserEditPwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) UserInfo(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*base.UserInfo, error) {
	out := new(base.UserInfo)
	err := c.cc.Invoke(ctx, "/center.Center/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) UserLogout(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/center.Center/UserLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) Online(ctx context.Context, in *OnlineReq, opts ...grpc.CallOption) (*OnlineReply, error) {
	out := new(OnlineReply)
	err := c.cc.Invoke(ctx, "/center.Center/Online", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) Offline(ctx context.Context, in *OfflineReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/center.Center/Offline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) ServerByUserID(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*ServerIDReply, error) {
	out := new(ServerIDReply)
	err := c.cc.Invoke(ctx, "/center.Center/ServerByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) BatchServersByUserIDs(ctx context.Context, in *UIDsReq, opts ...grpc.CallOption) (*ServerIDsReply, error) {
	out := new(ServerIDsReply)
	err := c.cc.Invoke(ctx, "/center.Center/BatchServersByUserIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) SendSMS(ctx context.Context, in *PhoneReq, opts ...grpc.CallOption) (*CodeReply, error) {
	out := new(CodeReply)
	err := c.cc.Invoke(ctx, "/center.Center/SendSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) CheckVCode(ctx context.Context, in *CheckCodeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/center.Center/CheckVCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) CheckOnline(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/center.Center/CheckOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CenterServer is the server API for Center service.
type CenterServer interface {
	// 用户注册
	UserRegister(context.Context, *RegisterReq) (*RegisterReply, error)
	// 用户名密码登录
	UsernameLogin(context.Context, *UsernameReq) (*UserToken, error)
	// 手机号登录
	PhoneLogin(context.Context, *PhoneReq) (*UserToken, error)
	// 修改用户信息
	UserEdit(context.Context, *EditReq) (*emptypb.Empty, error)
	// 修改密码
	UserEditPwd(context.Context, *EditPwdReq) (*emptypb.Empty, error)
	// 获取用户信息
	UserInfo(context.Context, *UIDReq) (*base.UserInfo, error)
	// 用户登出
	UserLogout(context.Context, *UIDReq) (*emptypb.Empty, error)
	// 用户上线，建立长连接
	Online(context.Context, *OnlineReq) (*OnlineReply, error)
	// 用户下线
	Offline(context.Context, *OfflineReq) (*emptypb.Empty, error)
	// 获取用户长连接所在的服务器ID
	ServerByUserID(context.Context, *UIDReq) (*ServerIDReply, error)
	// 批量获取长连接所在的服务器ID
	BatchServersByUserIDs(context.Context, *UIDsReq) (*ServerIDsReply, error)
	// 发送短信验证码
	SendSMS(context.Context, *PhoneReq) (*CodeReply, error)
	// 短信验证码验证
	CheckVCode(context.Context, *CheckCodeReq) (*emptypb.Empty, error)
	// 检测用户是否在线
	CheckOnline(context.Context, *UIDReq) (*BoolReply, error)
}

// UnimplementedCenterServer can be embedded to have forward compatible implementations.
type UnimplementedCenterServer struct {
}

func (*UnimplementedCenterServer) UserRegister(context.Context, *RegisterReq) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (*UnimplementedCenterServer) UsernameLogin(context.Context, *UsernameReq) (*UserToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsernameLogin not implemented")
}
func (*UnimplementedCenterServer) PhoneLogin(context.Context, *PhoneReq) (*UserToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneLogin not implemented")
}
func (*UnimplementedCenterServer) UserEdit(context.Context, *EditReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserEdit not implemented")
}
func (*UnimplementedCenterServer) UserEditPwd(context.Context, *EditPwdReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserEditPwd not implemented")
}
func (*UnimplementedCenterServer) UserInfo(context.Context, *UIDReq) (*base.UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (*UnimplementedCenterServer) UserLogout(context.Context, *UIDReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogout not implemented")
}
func (*UnimplementedCenterServer) Online(context.Context, *OnlineReq) (*OnlineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Online not implemented")
}
func (*UnimplementedCenterServer) Offline(context.Context, *OfflineReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Offline not implemented")
}
func (*UnimplementedCenterServer) ServerByUserID(context.Context, *UIDReq) (*ServerIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerByUserID not implemented")
}
func (*UnimplementedCenterServer) BatchServersByUserIDs(context.Context, *UIDsReq) (*ServerIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchServersByUserIDs not implemented")
}
func (*UnimplementedCenterServer) SendSMS(context.Context, *PhoneReq) (*CodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSMS not implemented")
}
func (*UnimplementedCenterServer) CheckVCode(context.Context, *CheckCodeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVCode not implemented")
}
func (*UnimplementedCenterServer) CheckOnline(context.Context, *UIDReq) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOnline not implemented")
}

func RegisterCenterServer(s *grpc.Server, srv CenterServer) {
	s.RegisterService(&_Center_serviceDesc, srv)
}

func _Center_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).UserRegister(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_UsernameLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).UsernameLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/UsernameLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).UsernameLogin(ctx, req.(*UsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_PhoneLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).PhoneLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/PhoneLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).PhoneLogin(ctx, req.(*PhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_UserEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).UserEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/UserEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).UserEdit(ctx, req.(*EditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_UserEditPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).UserEditPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/UserEditPwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).UserEditPwd(ctx, req.(*EditPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).UserInfo(ctx, req.(*UIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_UserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).UserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/UserLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).UserLogout(ctx, req.(*UIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_Online_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).Online(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/Online",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).Online(ctx, req.(*OnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_Offline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).Offline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/Offline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).Offline(ctx, req.(*OfflineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_ServerByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).ServerByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/ServerByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).ServerByUserID(ctx, req.(*UIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_BatchServersByUserIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).BatchServersByUserIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/BatchServersByUserIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).BatchServersByUserIDs(ctx, req.(*UIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_SendSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).SendSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/SendSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).SendSMS(ctx, req.(*PhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_CheckVCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).CheckVCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/CheckVCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).CheckVCode(ctx, req.(*CheckCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_CheckOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).CheckOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/CheckOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).CheckOnline(ctx, req.(*UIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Center_serviceDesc = grpc.ServiceDesc{
	ServiceName: "center.Center",
	HandlerType: (*CenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserRegister",
			Handler:    _Center_UserRegister_Handler,
		},
		{
			MethodName: "UsernameLogin",
			Handler:    _Center_UsernameLogin_Handler,
		},
		{
			MethodName: "PhoneLogin",
			Handler:    _Center_PhoneLogin_Handler,
		},
		{
			MethodName: "UserEdit",
			Handler:    _Center_UserEdit_Handler,
		},
		{
			MethodName: "UserEditPwd",
			Handler:    _Center_UserEditPwd_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _Center_UserInfo_Handler,
		},
		{
			MethodName: "UserLogout",
			Handler:    _Center_UserLogout_Handler,
		},
		{
			MethodName: "Online",
			Handler:    _Center_Online_Handler,
		},
		{
			MethodName: "Offline",
			Handler:    _Center_Offline_Handler,
		},
		{
			MethodName: "ServerByUserID",
			Handler:    _Center_ServerByUserID_Handler,
		},
		{
			MethodName: "BatchServersByUserIDs",
			Handler:    _Center_BatchServersByUserIDs_Handler,
		},
		{
			MethodName: "SendSMS",
			Handler:    _Center_SendSMS_Handler,
		},
		{
			MethodName: "CheckVCode",
			Handler:    _Center_CheckVCode_Handler,
		},
		{
			MethodName: "CheckOnline",
			Handler:    _Center_CheckOnline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "center/center.proto",
}
