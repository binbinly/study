// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cart/cart.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AddReqMultiError, or nil if none found.
func (m *AddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSkuId() <= 0 {
		err := AddReqValidationError{
			field:  "SkuId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNum() <= 0 {
		err := AddReqValidationError{
			field:  "Num",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddReqMultiError(errors)
	}
	return nil
}

// AddReqMultiError is an error wrapping multiple validation errors returned by
// AddReq.ValidateAll() if the designated constraints aren't met.
type AddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddReqMultiError) AllErrors() []error { return m }

// AddReqValidationError is the validation error returned by AddReq.Validate if
// the designated constraints aren't met.
type AddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddReqValidationError) ErrorName() string { return "AddReqValidationError" }

// Error satisfies the builtin error interface
func (e AddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddReqValidationError{}

// Validate checks the field values on EditReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EditReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EditReqMultiError, or nil if none found.
func (m *EditReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOldSkuId() <= 0 {
		err := EditReqValidationError{
			field:  "OldSkuId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNewSkuId() <= 0 {
		err := EditReqValidationError{
			field:  "NewSkuId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNum() <= 0 {
		err := EditReqValidationError{
			field:  "Num",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EditReqMultiError(errors)
	}
	return nil
}

// EditReqMultiError is an error wrapping multiple validation errors returned
// by EditReq.ValidateAll() if the designated constraints aren't met.
type EditReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditReqMultiError) AllErrors() []error { return m }

// EditReqValidationError is the validation error returned by EditReq.Validate
// if the designated constraints aren't met.
type EditReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditReqValidationError) ErrorName() string { return "EditReqValidationError" }

// Error satisfies the builtin error interface
func (e EditReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditReqValidationError{}

// Validate checks the field values on SkuReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SkuReqMultiError, or nil if none found.
func (m *SkuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSkuId() <= 0 {
		err := SkuReqValidationError{
			field:  "SkuId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SkuReqMultiError(errors)
	}
	return nil
}

// SkuReqMultiError is an error wrapping multiple validation errors returned by
// SkuReq.ValidateAll() if the designated constraints aren't met.
type SkuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuReqMultiError) AllErrors() []error { return m }

// SkuReqValidationError is the validation error returned by SkuReq.Validate if
// the designated constraints aren't met.
type SkuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuReqValidationError) ErrorName() string { return "SkuReqValidationError" }

// Error satisfies the builtin error interface
func (e SkuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuReqValidationError{}

// Validate checks the field values on SkusReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkusReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SkusReqMultiError, or nil if none found.
func (m *SkusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SkusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(m.GetSkuIds()) < 1 {
		err := SkusReqValidationError{
			field:  "SkuIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SkusReqMultiError(errors)
	}
	return nil
}

// SkusReqMultiError is an error wrapping multiple validation errors returned
// by SkusReq.ValidateAll() if the designated constraints aren't met.
type SkusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkusReqMultiError) AllErrors() []error { return m }

// SkusReqValidationError is the validation error returned by SkusReq.Validate
// if the designated constraints aren't met.
type SkusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkusReqValidationError) ErrorName() string { return "SkusReqValidationError" }

// Error satisfies the builtin error interface
func (e SkusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkusReqValidationError{}

// Validate checks the field values on CartsReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CartsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CartsReplyMultiError, or
// nil if none found.
func (m *CartsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CartsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CartsReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CartsReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CartsReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CartsReplyMultiError(errors)
	}
	return nil
}

// CartsReplyMultiError is an error wrapping multiple validation errors
// returned by CartsReply.ValidateAll() if the designated constraints aren't met.
type CartsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartsReplyMultiError) AllErrors() []error { return m }

// CartsReplyValidationError is the validation error returned by
// CartsReply.Validate if the designated constraints aren't met.
type CartsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartsReplyValidationError) ErrorName() string { return "CartsReplyValidationError" }

// Error satisfies the builtin error interface
func (e CartsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartsReplyValidationError{}

// Validate checks the field values on CartItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CartItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CartItemMultiError, or nil
// if none found.
func (m *CartItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SkuId

	// no validation rules for Title

	// no validation rules for Price

	// no validation rules for Cover

	// no validation rules for SkuAttr

	// no validation rules for Num

	if len(errors) > 0 {
		return CartItemMultiError(errors)
	}
	return nil
}

// CartItemMultiError is an error wrapping multiple validation errors returned
// by CartItem.ValidateAll() if the designated constraints aren't met.
type CartItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemMultiError) AllErrors() []error { return m }

// CartItemValidationError is the validation error returned by
// CartItem.Validate if the designated constraints aren't met.
type CartItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemValidationError) ErrorName() string { return "CartItemValidationError" }

// Error satisfies the builtin error interface
func (e CartItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemValidationError{}
