// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: market/market.proto

package common

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Market service

func NewMarketEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Market service

type MarketService interface {
	/// 获取首页配置数据
	GetHomeData(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*HomeDataReply, error)
	/// 获取首页分类下配置数据
	GetHomeCatData(ctx context.Context, in *CatReq, opts ...client.CallOption) (*AppSettingReply, error)
	/// 获取公告列表
	GetNoticeList(ctx context.Context, in *PageReq, opts ...client.CallOption) (*NoticeReply, error)
	/// 获取搜索页配置数据
	GetSearchData(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*SearchReply, error)
	/// 获取支付配置
	GetPayConfig(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*PayReply, error)
	/// 商品可以领取的优惠券列表
	GetCouponList(ctx context.Context, in *SkuReq, opts ...client.CallOption) (*CouponListReply, error)
	/// 我的优惠券列表
	GetMyCouponList(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*CouponListReply, error)
	/// 领取优惠券
	CouponDraw(ctx context.Context, in *CouponReq, opts ...client.CallOption) (*emptypb.Empty, error)
	/// ---- 以下内部调用 ----
	/// 使用优惠券
	CouponUsed(ctx context.Context, in *CouponUsedReq, opts ...client.CallOption) (*emptypb.Empty, error)
	/// 获取优惠券详情
	GetCouponInfo(ctx context.Context, in *CouponInfoReq, opts ...client.CallOption) (*CouponInternal, error)
}

type marketService struct {
	c    client.Client
	name string
}

func NewMarketService(name string, c client.Client) MarketService {
	return &marketService{
		c:    c,
		name: name,
	}
}

func (c *marketService) GetHomeData(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*HomeDataReply, error) {
	req := c.c.NewRequest(c.name, "Market.GetHomeData", in)
	out := new(HomeDataReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketService) GetHomeCatData(ctx context.Context, in *CatReq, opts ...client.CallOption) (*AppSettingReply, error) {
	req := c.c.NewRequest(c.name, "Market.GetHomeCatData", in)
	out := new(AppSettingReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketService) GetNoticeList(ctx context.Context, in *PageReq, opts ...client.CallOption) (*NoticeReply, error) {
	req := c.c.NewRequest(c.name, "Market.GetNoticeList", in)
	out := new(NoticeReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketService) GetSearchData(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*SearchReply, error) {
	req := c.c.NewRequest(c.name, "Market.GetSearchData", in)
	out := new(SearchReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketService) GetPayConfig(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*PayReply, error) {
	req := c.c.NewRequest(c.name, "Market.GetPayConfig", in)
	out := new(PayReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketService) GetCouponList(ctx context.Context, in *SkuReq, opts ...client.CallOption) (*CouponListReply, error) {
	req := c.c.NewRequest(c.name, "Market.GetCouponList", in)
	out := new(CouponListReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketService) GetMyCouponList(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*CouponListReply, error) {
	req := c.c.NewRequest(c.name, "Market.GetMyCouponList", in)
	out := new(CouponListReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketService) CouponDraw(ctx context.Context, in *CouponReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Market.CouponDraw", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketService) CouponUsed(ctx context.Context, in *CouponUsedReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Market.CouponUsed", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketService) GetCouponInfo(ctx context.Context, in *CouponInfoReq, opts ...client.CallOption) (*CouponInternal, error) {
	req := c.c.NewRequest(c.name, "Market.GetCouponInfo", in)
	out := new(CouponInternal)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Market service

type MarketHandler interface {
	/// 获取首页配置数据
	GetHomeData(context.Context, *emptypb.Empty, *HomeDataReply) error
	/// 获取首页分类下配置数据
	GetHomeCatData(context.Context, *CatReq, *AppSettingReply) error
	/// 获取公告列表
	GetNoticeList(context.Context, *PageReq, *NoticeReply) error
	/// 获取搜索页配置数据
	GetSearchData(context.Context, *emptypb.Empty, *SearchReply) error
	/// 获取支付配置
	GetPayConfig(context.Context, *emptypb.Empty, *PayReply) error
	/// 商品可以领取的优惠券列表
	GetCouponList(context.Context, *SkuReq, *CouponListReply) error
	/// 我的优惠券列表
	GetMyCouponList(context.Context, *emptypb.Empty, *CouponListReply) error
	/// 领取优惠券
	CouponDraw(context.Context, *CouponReq, *emptypb.Empty) error
	/// ---- 以下内部调用 ----
	/// 使用优惠券
	CouponUsed(context.Context, *CouponUsedReq, *emptypb.Empty) error
	/// 获取优惠券详情
	GetCouponInfo(context.Context, *CouponInfoReq, *CouponInternal) error
}

func RegisterMarketHandler(s server.Server, hdlr MarketHandler, opts ...server.HandlerOption) error {
	type market interface {
		GetHomeData(ctx context.Context, in *emptypb.Empty, out *HomeDataReply) error
		GetHomeCatData(ctx context.Context, in *CatReq, out *AppSettingReply) error
		GetNoticeList(ctx context.Context, in *PageReq, out *NoticeReply) error
		GetSearchData(ctx context.Context, in *emptypb.Empty, out *SearchReply) error
		GetPayConfig(ctx context.Context, in *emptypb.Empty, out *PayReply) error
		GetCouponList(ctx context.Context, in *SkuReq, out *CouponListReply) error
		GetMyCouponList(ctx context.Context, in *emptypb.Empty, out *CouponListReply) error
		CouponDraw(ctx context.Context, in *CouponReq, out *emptypb.Empty) error
		CouponUsed(ctx context.Context, in *CouponUsedReq, out *emptypb.Empty) error
		GetCouponInfo(ctx context.Context, in *CouponInfoReq, out *CouponInternal) error
	}
	type Market struct {
		market
	}
	h := &marketHandler{hdlr}
	return s.Handle(s.NewHandler(&Market{h}, opts...))
}

type marketHandler struct {
	MarketHandler
}

func (h *marketHandler) GetHomeData(ctx context.Context, in *emptypb.Empty, out *HomeDataReply) error {
	return h.MarketHandler.GetHomeData(ctx, in, out)
}

func (h *marketHandler) GetHomeCatData(ctx context.Context, in *CatReq, out *AppSettingReply) error {
	return h.MarketHandler.GetHomeCatData(ctx, in, out)
}

func (h *marketHandler) GetNoticeList(ctx context.Context, in *PageReq, out *NoticeReply) error {
	return h.MarketHandler.GetNoticeList(ctx, in, out)
}

func (h *marketHandler) GetSearchData(ctx context.Context, in *emptypb.Empty, out *SearchReply) error {
	return h.MarketHandler.GetSearchData(ctx, in, out)
}

func (h *marketHandler) GetPayConfig(ctx context.Context, in *emptypb.Empty, out *PayReply) error {
	return h.MarketHandler.GetPayConfig(ctx, in, out)
}

func (h *marketHandler) GetCouponList(ctx context.Context, in *SkuReq, out *CouponListReply) error {
	return h.MarketHandler.GetCouponList(ctx, in, out)
}

func (h *marketHandler) GetMyCouponList(ctx context.Context, in *emptypb.Empty, out *CouponListReply) error {
	return h.MarketHandler.GetMyCouponList(ctx, in, out)
}

func (h *marketHandler) CouponDraw(ctx context.Context, in *CouponReq, out *emptypb.Empty) error {
	return h.MarketHandler.CouponDraw(ctx, in, out)
}

func (h *marketHandler) CouponUsed(ctx context.Context, in *CouponUsedReq, out *emptypb.Empty) error {
	return h.MarketHandler.CouponUsed(ctx, in, out)
}

func (h *marketHandler) GetCouponInfo(ctx context.Context, in *CouponInfoReq, out *CouponInternal) error {
	return h.MarketHandler.GetCouponInfo(ctx, in, out)
}
