// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: product/product.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SkuReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SkuReqMultiError, or nil if none found.
func (m *SkuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSkuId() <= 0 {
		err := SkuReqValidationError{
			field:  "SkuId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SkuReqMultiError(errors)
	}
	return nil
}

// SkuReqMultiError is an error wrapping multiple validation errors returned by
// SkuReq.ValidateAll() if the designated constraints aren't met.
type SkuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuReqMultiError) AllErrors() []error { return m }

// SkuReqValidationError is the validation error returned by SkuReq.Validate if
// the designated constraints aren't met.
type SkuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuReqValidationError) ErrorName() string { return "SkuReqValidationError" }

// Error satisfies the builtin error interface
func (e SkuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuReqValidationError{}

// Validate checks the field values on SkuListReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SkuListReqMultiError, or
// nil if none found.
func (m *SkuListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CatId

	// no validation rules for Page

	if len(errors) > 0 {
		return SkuListReqMultiError(errors)
	}
	return nil
}

// SkuListReqMultiError is an error wrapping multiple validation errors
// returned by SkuListReq.ValidateAll() if the designated constraints aren't met.
type SkuListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuListReqMultiError) AllErrors() []error { return m }

// SkuListReqValidationError is the validation error returned by
// SkuListReq.Validate if the designated constraints aren't met.
type SkuListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuListReqValidationError) ErrorName() string { return "SkuListReqValidationError" }

// Error satisfies the builtin error interface
func (e SkuListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuListReqValidationError{}

// Validate checks the field values on SearchReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchReqMultiError, or nil
// if none found.
func (m *SearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	// no validation rules for CatId

	// no validation rules for Field

	// no validation rules for Order

	// no validation rules for HasStock

	// no validation rules for PriceS

	// no validation rules for PriceE

	for idx, item := range m.GetAttrs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchReqValidationError{
						field:  fmt.Sprintf("Attrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchReqValidationError{
						field:  fmt.Sprintf("Attrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchReqValidationError{
					field:  fmt.Sprintf("Attrs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	if len(errors) > 0 {
		return SearchReqMultiError(errors)
	}
	return nil
}

// SearchReqMultiError is an error wrapping multiple validation errors returned
// by SearchReq.ValidateAll() if the designated constraints aren't met.
type SearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchReqMultiError) AllErrors() []error { return m }

// SearchReqValidationError is the validation error returned by
// SearchReq.Validate if the designated constraints aren't met.
type SearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchReqValidationError) ErrorName() string { return "SearchReqValidationError" }

// Error satisfies the builtin error interface
func (e SearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchReqValidationError{}

// Validate checks the field values on SearchAttrs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchAttrs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAttrs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchAttrsMultiError, or
// nil if none found.
func (m *SearchAttrs) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAttrs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SearchAttrsMultiError(errors)
	}
	return nil
}

// SearchAttrsMultiError is an error wrapping multiple validation errors
// returned by SearchAttrs.ValidateAll() if the designated constraints aren't met.
type SearchAttrsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAttrsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAttrsMultiError) AllErrors() []error { return m }

// SearchAttrsValidationError is the validation error returned by
// SearchAttrs.Validate if the designated constraints aren't met.
type SearchAttrsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAttrsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAttrsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAttrsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAttrsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAttrsValidationError) ErrorName() string { return "SearchAttrsValidationError" }

// Error satisfies the builtin error interface
func (e SearchAttrsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAttrs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAttrsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAttrsValidationError{}

// Validate checks the field values on CommentReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommentReqMultiError, or
// nil if none found.
func (m *CommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetSkuIds()) < 1 {
		err := CommentReqValidationError{
			field:  "SkuIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := CommentReqValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrderId() <= 0 {
		err := CommentReqValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStar() <= 0 {
		err := CommentReqValidationError{
			field:  "Star",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 5 || l > 500 {
		err := CommentReqValidationError{
			field:  "Content",
			reason: "value length must be between 5 and 500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Resources

	if len(errors) > 0 {
		return CommentReqMultiError(errors)
	}
	return nil
}

// CommentReqMultiError is an error wrapping multiple validation errors
// returned by CommentReq.ValidateAll() if the designated constraints aren't met.
type CommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentReqMultiError) AllErrors() []error { return m }

// CommentReqValidationError is the validation error returned by
// CommentReq.Validate if the designated constraints aren't met.
type CommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentReqValidationError) ErrorName() string { return "CommentReqValidationError" }

// Error satisfies the builtin error interface
func (e CommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentReqValidationError{}

// Validate checks the field values on CategoryReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryReplyMultiError, or
// nil if none found.
func (m *CategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoryReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoryReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoryReplyMultiError(errors)
	}
	return nil
}

// CategoryReplyMultiError is an error wrapping multiple validation errors
// returned by CategoryReply.ValidateAll() if the designated constraints
// aren't met.
type CategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryReplyMultiError) AllErrors() []error { return m }

// CategoryReplyValidationError is the validation error returned by
// CategoryReply.Validate if the designated constraints aren't met.
type CategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryReplyValidationError) ErrorName() string { return "CategoryReplyValidationError" }

// Error satisfies the builtin error interface
func (e CategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryReplyValidationError{}

// Validate checks the field values on SkuReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SkuReplyMultiError, or nil
// if none found.
func (m *SkuReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SkuReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SkuReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SkuReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SkuReplyMultiError(errors)
	}
	return nil
}

// SkuReplyMultiError is an error wrapping multiple validation errors returned
// by SkuReply.ValidateAll() if the designated constraints aren't met.
type SkuReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuReplyMultiError) AllErrors() []error { return m }

// SkuReplyValidationError is the validation error returned by
// SkuReply.Validate if the designated constraints aren't met.
type SkuReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuReplyValidationError) ErrorName() string { return "SkuReplyValidationError" }

// Error satisfies the builtin error interface
func (e SkuReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuReplyValidationError{}

// Validate checks the field values on SkuListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SkuListReplyMultiError, or
// nil if none found.
func (m *SkuListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SkuListReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SkuListReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SkuListReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SkuListReplyMultiError(errors)
	}
	return nil
}

// SkuListReplyMultiError is an error wrapping multiple validation errors
// returned by SkuListReply.ValidateAll() if the designated constraints aren't met.
type SkuListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuListReplyMultiError) AllErrors() []error { return m }

// SkuListReplyValidationError is the validation error returned by
// SkuListReply.Validate if the designated constraints aren't met.
type SkuListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuListReplyValidationError) ErrorName() string { return "SkuListReplyValidationError" }

// Error satisfies the builtin error interface
func (e SkuListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuListReplyValidationError{}

// Validate checks the field values on SearchReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchReplyMultiError, or
// nil if none found.
func (m *SearchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBrands() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Brands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Brands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchReplyValidationError{
					field:  fmt.Sprintf("Brands[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAttrs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Attrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Attrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchReplyValidationError{
					field:  fmt.Sprintf("Attrs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCats() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Cats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Cats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchReplyValidationError{
					field:  fmt.Sprintf("Cats[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchReplyMultiError(errors)
	}
	return nil
}

// SearchReplyMultiError is an error wrapping multiple validation errors
// returned by SearchReply.ValidateAll() if the designated constraints aren't met.
type SearchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchReplyMultiError) AllErrors() []error { return m }

// SearchReplyValidationError is the validation error returned by
// SearchReply.Validate if the designated constraints aren't met.
type SearchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchReplyValidationError) ErrorName() string { return "SearchReplyValidationError" }

// Error satisfies the builtin error interface
func (e SearchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchReplyValidationError{}

// Validate checks the field values on SkuSaleAttrReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SkuSaleAttrReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuSaleAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SkuSaleAttrReplyMultiError, or nil if none found.
func (m *SkuSaleAttrReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuSaleAttrReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SkuSaleAttrReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SkuSaleAttrReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SkuSaleAttrReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SkuSaleAttrReplyMultiError(errors)
	}
	return nil
}

// SkuSaleAttrReplyMultiError is an error wrapping multiple validation errors
// returned by SkuSaleAttrReply.ValidateAll() if the designated constraints
// aren't met.
type SkuSaleAttrReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuSaleAttrReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuSaleAttrReplyMultiError) AllErrors() []error { return m }

// SkuSaleAttrReplyValidationError is the validation error returned by
// SkuSaleAttrReply.Validate if the designated constraints aren't met.
type SkuSaleAttrReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuSaleAttrReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuSaleAttrReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuSaleAttrReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuSaleAttrReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuSaleAttrReplyValidationError) ErrorName() string { return "SkuSaleAttrReplyValidationError" }

// Error satisfies the builtin error interface
func (e SkuSaleAttrReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuSaleAttrReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuSaleAttrReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuSaleAttrReplyValidationError{}

// Validate checks the field values on SkuInfoInternal with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SkuInfoInternal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuInfoInternal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SkuInfoInternalMultiError, or nil if none found.
func (m *SkuInfoInternal) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuInfoInternal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SkuInfoInternalValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SkuInfoInternalValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SkuInfoInternalValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SkuInfoInternalMultiError(errors)
	}
	return nil
}

// SkuInfoInternalMultiError is an error wrapping multiple validation errors
// returned by SkuInfoInternal.ValidateAll() if the designated constraints
// aren't met.
type SkuInfoInternalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuInfoInternalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuInfoInternalMultiError) AllErrors() []error { return m }

// SkuInfoInternalValidationError is the validation error returned by
// SkuInfoInternal.Validate if the designated constraints aren't met.
type SkuInfoInternalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuInfoInternalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuInfoInternalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuInfoInternalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuInfoInternalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuInfoInternalValidationError) ErrorName() string { return "SkuInfoInternalValidationError" }

// Error satisfies the builtin error interface
func (e SkuInfoInternalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuInfoInternal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuInfoInternalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuInfoInternalValidationError{}

// Validate checks the field values on SkuEs with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuEs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuEs with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SkuEsMultiError, or nil if none found.
func (m *SkuEs) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuEs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Price

	// no validation rules for Cover

	// no validation rules for SaleCount

	// no validation rules for HasStock

	if len(errors) > 0 {
		return SkuEsMultiError(errors)
	}
	return nil
}

// SkuEsMultiError is an error wrapping multiple validation errors returned by
// SkuEs.ValidateAll() if the designated constraints aren't met.
type SkuEsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuEsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuEsMultiError) AllErrors() []error { return m }

// SkuEsValidationError is the validation error returned by SkuEs.Validate if
// the designated constraints aren't met.
type SkuEsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuEsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuEsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuEsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuEsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuEsValidationError) ErrorName() string { return "SkuEsValidationError" }

// Error satisfies the builtin error interface
func (e SkuEsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuEs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuEsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuEsValidationError{}

// Validate checks the field values on BrandEs with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BrandEs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BrandEs with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BrandEsMultiError, or nil if none found.
func (m *BrandEs) ValidateAll() error {
	return m.validate(true)
}

func (m *BrandEs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Logo

	if len(errors) > 0 {
		return BrandEsMultiError(errors)
	}
	return nil
}

// BrandEsMultiError is an error wrapping multiple validation errors returned
// by BrandEs.ValidateAll() if the designated constraints aren't met.
type BrandEsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BrandEsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BrandEsMultiError) AllErrors() []error { return m }

// BrandEsValidationError is the validation error returned by BrandEs.Validate
// if the designated constraints aren't met.
type BrandEsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BrandEsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BrandEsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BrandEsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BrandEsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BrandEsValidationError) ErrorName() string { return "BrandEsValidationError" }

// Error satisfies the builtin error interface
func (e BrandEsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBrandEs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BrandEsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BrandEsValidationError{}

// Validate checks the field values on AttrEs with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AttrEs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttrEs with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AttrEsMultiError, or nil if none found.
func (m *AttrEs) ValidateAll() error {
	return m.validate(true)
}

func (m *AttrEs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return AttrEsMultiError(errors)
	}
	return nil
}

// AttrEsMultiError is an error wrapping multiple validation errors returned by
// AttrEs.ValidateAll() if the designated constraints aren't met.
type AttrEsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttrEsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttrEsMultiError) AllErrors() []error { return m }

// AttrEsValidationError is the validation error returned by AttrEs.Validate if
// the designated constraints aren't met.
type AttrEsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttrEsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttrEsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttrEsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttrEsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttrEsValidationError) ErrorName() string { return "AttrEsValidationError" }

// Error satisfies the builtin error interface
func (e AttrEsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttrEs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttrEsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttrEsValidationError{}

// Validate checks the field values on CatEs with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CatEs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CatEs with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CatEsMultiError, or nil if none found.
func (m *CatEs) ValidateAll() error {
	return m.validate(true)
}

func (m *CatEs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return CatEsMultiError(errors)
	}
	return nil
}

// CatEsMultiError is an error wrapping multiple validation errors returned by
// CatEs.ValidateAll() if the designated constraints aren't met.
type CatEsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CatEsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CatEsMultiError) AllErrors() []error { return m }

// CatEsValidationError is the validation error returned by CatEs.Validate if
// the designated constraints aren't met.
type CatEsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CatEsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CatEsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CatEsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CatEsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CatEsValidationError) ErrorName() string { return "CatEsValidationError" }

// Error satisfies the builtin error interface
func (e CatEsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCatEs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CatEsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CatEsValidationError{}

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Category) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Category with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryMultiError, or nil
// if none found.
func (m *Category) ValidateAll() error {
	return m.validate(true)
}

func (m *Category) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for Name

	// no validation rules for Sort

	for idx, item := range m.GetChild() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoryValidationError{
						field:  fmt.Sprintf("Child[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoryValidationError{
						field:  fmt.Sprintf("Child[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryValidationError{
					field:  fmt.Sprintf("Child[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoryMultiError(errors)
	}
	return nil
}

// CategoryMultiError is an error wrapping multiple validation errors returned
// by Category.ValidateAll() if the designated constraints aren't met.
type CategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryMultiError) AllErrors() []error { return m }

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on Sku with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Sku) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sku with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SkuMultiError, or nil if none found.
func (m *Sku) ValidateAll() error {
	return m.validate(true)
}

func (m *Sku) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SpuId

	// no validation rules for CatId

	// no validation rules for BrandId

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for Cover

	// no validation rules for Subtitle

	// no validation rules for Price

	// no validation rules for SaleCount

	// no validation rules for Stock

	// no validation rules for IsMany

	for idx, item := range m.GetSkus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SkuValidationError{
						field:  fmt.Sprintf("Skus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SkuValidationError{
						field:  fmt.Sprintf("Skus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SkuValidationError{
					field:  fmt.Sprintf("Skus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAttrs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SkuValidationError{
						field:  fmt.Sprintf("Attrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SkuValidationError{
						field:  fmt.Sprintf("Attrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SkuValidationError{
					field:  fmt.Sprintf("Attrs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSaleAttrs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SkuValidationError{
						field:  fmt.Sprintf("SaleAttrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SkuValidationError{
						field:  fmt.Sprintf("SaleAttrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SkuValidationError{
					field:  fmt.Sprintf("SaleAttrs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SkuMultiError(errors)
	}
	return nil
}

// SkuMultiError is an error wrapping multiple validation errors returned by
// Sku.ValidateAll() if the designated constraints aren't met.
type SkuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuMultiError) AllErrors() []error { return m }

// SkuValidationError is the validation error returned by Sku.Validate if the
// designated constraints aren't met.
type SkuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuValidationError) ErrorName() string { return "SkuValidationError" }

// Error satisfies the builtin error interface
func (e SkuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSku.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuValidationError{}

// Validate checks the field values on SkuSaleAttr with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuSaleAttr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuSaleAttr with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SkuSaleAttrMultiError, or
// nil if none found.
func (m *SkuSaleAttr) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuSaleAttr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for IsMany

	for idx, item := range m.GetSkus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SkuSaleAttrValidationError{
						field:  fmt.Sprintf("Skus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SkuSaleAttrValidationError{
						field:  fmt.Sprintf("Skus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SkuSaleAttrValidationError{
					field:  fmt.Sprintf("Skus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSaleAttrs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SkuSaleAttrValidationError{
						field:  fmt.Sprintf("SaleAttrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SkuSaleAttrValidationError{
						field:  fmt.Sprintf("SaleAttrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SkuSaleAttrValidationError{
					field:  fmt.Sprintf("SaleAttrs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SkuSaleAttrMultiError(errors)
	}
	return nil
}

// SkuSaleAttrMultiError is an error wrapping multiple validation errors
// returned by SkuSaleAttr.ValidateAll() if the designated constraints aren't met.
type SkuSaleAttrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuSaleAttrMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuSaleAttrMultiError) AllErrors() []error { return m }

// SkuSaleAttrValidationError is the validation error returned by
// SkuSaleAttr.Validate if the designated constraints aren't met.
type SkuSaleAttrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuSaleAttrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuSaleAttrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuSaleAttrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuSaleAttrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuSaleAttrValidationError) ErrorName() string { return "SkuSaleAttrValidationError" }

// Error satisfies the builtin error interface
func (e SkuSaleAttrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuSaleAttr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuSaleAttrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuSaleAttrValidationError{}

// Validate checks the field values on SkuInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SkuInfoMultiError, or nil if none found.
func (m *SkuInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SpuId

	// no validation rules for CatId

	// no validation rules for BrandId

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for Cover

	// no validation rules for Subtitle

	// no validation rules for Price

	// no validation rules for SaleCount

	// no validation rules for AttrValue

	if len(errors) > 0 {
		return SkuInfoMultiError(errors)
	}
	return nil
}

// SkuInfoMultiError is an error wrapping multiple validation errors returned
// by SkuInfo.ValidateAll() if the designated constraints aren't met.
type SkuInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuInfoMultiError) AllErrors() []error { return m }

// SkuInfoValidationError is the validation error returned by SkuInfo.Validate
// if the designated constraints aren't met.
type SkuInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuInfoValidationError) ErrorName() string { return "SkuInfoValidationError" }

// Error satisfies the builtin error interface
func (e SkuInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuInfoValidationError{}

// Validate checks the field values on Attrs with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Attrs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Attrs with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AttrsMultiError, or nil if none found.
func (m *Attrs) ValidateAll() error {
	return m.validate(true)
}

func (m *Attrs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for GroupName

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AttrsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AttrsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AttrsValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AttrsMultiError(errors)
	}
	return nil
}

// AttrsMultiError is an error wrapping multiple validation errors returned by
// Attrs.ValidateAll() if the designated constraints aren't met.
type AttrsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttrsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttrsMultiError) AllErrors() []error { return m }

// AttrsValidationError is the validation error returned by Attrs.Validate if
// the designated constraints aren't met.
type AttrsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttrsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttrsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttrsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttrsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttrsValidationError) ErrorName() string { return "AttrsValidationError" }

// Error satisfies the builtin error interface
func (e AttrsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttrs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttrsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttrsValidationError{}

// Validate checks the field values on Attr with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Attr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Attr with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AttrMultiError, or nil if none found.
func (m *Attr) ValidateAll() error {
	return m.validate(true)
}

func (m *Attr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Value

	if len(errors) > 0 {
		return AttrMultiError(errors)
	}
	return nil
}

// AttrMultiError is an error wrapping multiple validation errors returned by
// Attr.ValidateAll() if the designated constraints aren't met.
type AttrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttrMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttrMultiError) AllErrors() []error { return m }

// AttrValidationError is the validation error returned by Attr.Validate if the
// designated constraints aren't met.
type AttrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttrValidationError) ErrorName() string { return "AttrValidationError" }

// Error satisfies the builtin error interface
func (e AttrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttrValidationError{}

// Validate checks the field values on Skus with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Skus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Skus with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SkusMultiError, or nil if none found.
func (m *Skus) ValidateAll() error {
	return m.validate(true)
}

func (m *Skus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SkuId

	// no validation rules for Price

	// no validation rules for Stock

	for idx, item := range m.GetAttrs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SkusValidationError{
						field:  fmt.Sprintf("Attrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SkusValidationError{
						field:  fmt.Sprintf("Attrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SkusValidationError{
					field:  fmt.Sprintf("Attrs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SkusMultiError(errors)
	}
	return nil
}

// SkusMultiError is an error wrapping multiple validation errors returned by
// Skus.ValidateAll() if the designated constraints aren't met.
type SkusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkusMultiError) AllErrors() []error { return m }

// SkusValidationError is the validation error returned by Skus.Validate if the
// designated constraints aren't met.
type SkusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkusValidationError) ErrorName() string { return "SkusValidationError" }

// Error satisfies the builtin error interface
func (e SkusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkusValidationError{}

// Validate checks the field values on SkuAttr with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuAttr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuAttr with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SkuAttrMultiError, or nil if none found.
func (m *SkuAttr) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuAttr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AttrId

	// no validation rules for ValueId

	// no validation rules for AttrName

	// no validation rules for ValueName

	if len(errors) > 0 {
		return SkuAttrMultiError(errors)
	}
	return nil
}

// SkuAttrMultiError is an error wrapping multiple validation errors returned
// by SkuAttr.ValidateAll() if the designated constraints aren't met.
type SkuAttrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuAttrMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuAttrMultiError) AllErrors() []error { return m }

// SkuAttrValidationError is the validation error returned by SkuAttr.Validate
// if the designated constraints aren't met.
type SkuAttrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuAttrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuAttrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuAttrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuAttrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuAttrValidationError) ErrorName() string { return "SkuAttrValidationError" }

// Error satisfies the builtin error interface
func (e SkuAttrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuAttr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuAttrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuAttrValidationError{}

// Validate checks the field values on SaleAttrs with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaleAttrs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaleAttrs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaleAttrsMultiError, or nil
// if none found.
func (m *SaleAttrs) ValidateAll() error {
	return m.validate(true)
}

func (m *SaleAttrs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AttrId

	// no validation rules for AttrName

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SaleAttrsValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SaleAttrsValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SaleAttrsValidationError{
					field:  fmt.Sprintf("Values[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SaleAttrsMultiError(errors)
	}
	return nil
}

// SaleAttrsMultiError is an error wrapping multiple validation errors returned
// by SaleAttrs.ValidateAll() if the designated constraints aren't met.
type SaleAttrsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaleAttrsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaleAttrsMultiError) AllErrors() []error { return m }

// SaleAttrsValidationError is the validation error returned by
// SaleAttrs.Validate if the designated constraints aren't met.
type SaleAttrsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaleAttrsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaleAttrsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaleAttrsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaleAttrsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaleAttrsValidationError) ErrorName() string { return "SaleAttrsValidationError" }

// Error satisfies the builtin error interface
func (e SaleAttrsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaleAttrs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaleAttrsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaleAttrsValidationError{}

// Validate checks the field values on SkuValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SkuValueMultiError, or nil
// if none found.
func (m *SkuValue) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return SkuValueMultiError(errors)
	}
	return nil
}

// SkuValueMultiError is an error wrapping multiple validation errors returned
// by SkuValue.ValidateAll() if the designated constraints aren't met.
type SkuValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuValueMultiError) AllErrors() []error { return m }

// SkuValueValidationError is the validation error returned by
// SkuValue.Validate if the designated constraints aren't met.
type SkuValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuValueValidationError) ErrorName() string { return "SkuValueValidationError" }

// Error satisfies the builtin error interface
func (e SkuValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuValueValidationError{}
