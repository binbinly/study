// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: seckill/seckill.proto

package common

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Seckill service

func NewSeckillEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Seckill service

type SeckillService interface {
	//秒杀
	Kill(ctx context.Context, in *KillReq, opts ...client.CallOption) (*KillReply, error)
	//获取所有秒杀场次
	GetSessionAll(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*SessionsReply, error)
	//获取场次下所有秒杀商品
	GetSkusList(ctx context.Context, in *SessionIdReq, opts ...client.CallOption) (*SkusReply, error)
	//获取商品秒杀详情
	GetSkuByID(ctx context.Context, in *SkuIdReq, opts ...client.CallOption) (*SkuReply, error)
}

type seckillService struct {
	c    client.Client
	name string
}

func NewSeckillService(name string, c client.Client) SeckillService {
	return &seckillService{
		c:    c,
		name: name,
	}
}

func (c *seckillService) Kill(ctx context.Context, in *KillReq, opts ...client.CallOption) (*KillReply, error) {
	req := c.c.NewRequest(c.name, "Seckill.Kill", in)
	out := new(KillReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillService) GetSessionAll(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*SessionsReply, error) {
	req := c.c.NewRequest(c.name, "Seckill.GetSessionAll", in)
	out := new(SessionsReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillService) GetSkusList(ctx context.Context, in *SessionIdReq, opts ...client.CallOption) (*SkusReply, error) {
	req := c.c.NewRequest(c.name, "Seckill.GetSkusList", in)
	out := new(SkusReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillService) GetSkuByID(ctx context.Context, in *SkuIdReq, opts ...client.CallOption) (*SkuReply, error) {
	req := c.c.NewRequest(c.name, "Seckill.GetSkuByID", in)
	out := new(SkuReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Seckill service

type SeckillHandler interface {
	//秒杀
	Kill(context.Context, *KillReq, *KillReply) error
	//获取所有秒杀场次
	GetSessionAll(context.Context, *emptypb.Empty, *SessionsReply) error
	//获取场次下所有秒杀商品
	GetSkusList(context.Context, *SessionIdReq, *SkusReply) error
	//获取商品秒杀详情
	GetSkuByID(context.Context, *SkuIdReq, *SkuReply) error
}

func RegisterSeckillHandler(s server.Server, hdlr SeckillHandler, opts ...server.HandlerOption) error {
	type seckill interface {
		Kill(ctx context.Context, in *KillReq, out *KillReply) error
		GetSessionAll(ctx context.Context, in *emptypb.Empty, out *SessionsReply) error
		GetSkusList(ctx context.Context, in *SessionIdReq, out *SkusReply) error
		GetSkuByID(ctx context.Context, in *SkuIdReq, out *SkuReply) error
	}
	type Seckill struct {
		seckill
	}
	h := &seckillHandler{hdlr}
	return s.Handle(s.NewHandler(&Seckill{h}, opts...))
}

type seckillHandler struct {
	SeckillHandler
}

func (h *seckillHandler) Kill(ctx context.Context, in *KillReq, out *KillReply) error {
	return h.SeckillHandler.Kill(ctx, in, out)
}

func (h *seckillHandler) GetSessionAll(ctx context.Context, in *emptypb.Empty, out *SessionsReply) error {
	return h.SeckillHandler.GetSessionAll(ctx, in, out)
}

func (h *seckillHandler) GetSkusList(ctx context.Context, in *SessionIdReq, out *SkusReply) error {
	return h.SeckillHandler.GetSkusList(ctx, in, out)
}

func (h *seckillHandler) GetSkuByID(ctx context.Context, in *SkuIdReq, out *SkuReply) error {
	return h.SeckillHandler.GetSkuByID(ctx, in, out)
}
