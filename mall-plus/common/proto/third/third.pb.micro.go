// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: third/third.proto

package common

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Third service

func NewThirdEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Third service

type ThirdService interface {
	/// 发送短信验证码
	SendSMS(ctx context.Context, in *PhoneReq, opts ...client.CallOption) (*CodeReply, error)
	/// 短信验证码验证
	CheckVCode(ctx context.Context, in *VCodeReq, opts ...client.CallOption) (*emptypb.Empty, error)
	/// 以太币支付检测
	CheckETHPay(ctx context.Context, in *ETHPayReq, opts ...client.CallOption) (*emptypb.Empty, error)
}

type thirdService struct {
	c    client.Client
	name string
}

func NewThirdService(name string, c client.Client) ThirdService {
	return &thirdService{
		c:    c,
		name: name,
	}
}

func (c *thirdService) SendSMS(ctx context.Context, in *PhoneReq, opts ...client.CallOption) (*CodeReply, error) {
	req := c.c.NewRequest(c.name, "Third.SendSMS", in)
	out := new(CodeReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdService) CheckVCode(ctx context.Context, in *VCodeReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Third.CheckVCode", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdService) CheckETHPay(ctx context.Context, in *ETHPayReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Third.CheckETHPay", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Third service

type ThirdHandler interface {
	/// 发送短信验证码
	SendSMS(context.Context, *PhoneReq, *CodeReply) error
	/// 短信验证码验证
	CheckVCode(context.Context, *VCodeReq, *emptypb.Empty) error
	/// 以太币支付检测
	CheckETHPay(context.Context, *ETHPayReq, *emptypb.Empty) error
}

func RegisterThirdHandler(s server.Server, hdlr ThirdHandler, opts ...server.HandlerOption) error {
	type third interface {
		SendSMS(ctx context.Context, in *PhoneReq, out *CodeReply) error
		CheckVCode(ctx context.Context, in *VCodeReq, out *emptypb.Empty) error
		CheckETHPay(ctx context.Context, in *ETHPayReq, out *emptypb.Empty) error
	}
	type Third struct {
		third
	}
	h := &thirdHandler{hdlr}
	return s.Handle(s.NewHandler(&Third{h}, opts...))
}

type thirdHandler struct {
	ThirdHandler
}

func (h *thirdHandler) SendSMS(ctx context.Context, in *PhoneReq, out *CodeReply) error {
	return h.ThirdHandler.SendSMS(ctx, in, out)
}

func (h *thirdHandler) CheckVCode(ctx context.Context, in *VCodeReq, out *emptypb.Empty) error {
	return h.ThirdHandler.CheckVCode(ctx, in, out)
}

func (h *thirdHandler) CheckETHPay(ctx context.Context, in *ETHPayReq, out *emptypb.Empty) error {
	return h.ThirdHandler.CheckETHPay(ctx, in, out)
}
