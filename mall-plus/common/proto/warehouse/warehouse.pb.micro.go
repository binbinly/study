// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: warehouse/warehouse.proto

package common

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Warehouse service

func NewWarehouseEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Warehouse service

type WarehouseService interface {
	/// 获取sku库存数量
	GetSkuStock(ctx context.Context, in *SkuStockReq, opts ...client.CallOption) (*StockNumReply, error)
	/// 获取spu下所有sku库存数量
	GetSpuStock(ctx context.Context, in *SpuStockReq, opts ...client.CallOption) (*SkuStockNum, error)
	/// 锁定sku库存
	SKuStockLock(ctx context.Context, in *SkuStockLockReq, opts ...client.CallOption) (*emptypb.Empty, error)
	/// 解锁sku库存
	SkuStockUnlock(ctx context.Context, in *SkuStockUnlockReq, opts ...client.CallOption) (*emptypb.Empty, error)
}

type warehouseService struct {
	c    client.Client
	name string
}

func NewWarehouseService(name string, c client.Client) WarehouseService {
	return &warehouseService{
		c:    c,
		name: name,
	}
}

func (c *warehouseService) GetSkuStock(ctx context.Context, in *SkuStockReq, opts ...client.CallOption) (*StockNumReply, error) {
	req := c.c.NewRequest(c.name, "Warehouse.GetSkuStock", in)
	out := new(StockNumReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseService) GetSpuStock(ctx context.Context, in *SpuStockReq, opts ...client.CallOption) (*SkuStockNum, error) {
	req := c.c.NewRequest(c.name, "Warehouse.GetSpuStock", in)
	out := new(SkuStockNum)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseService) SKuStockLock(ctx context.Context, in *SkuStockLockReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Warehouse.SKuStockLock", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseService) SkuStockUnlock(ctx context.Context, in *SkuStockUnlockReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Warehouse.SkuStockUnlock", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Warehouse service

type WarehouseHandler interface {
	/// 获取sku库存数量
	GetSkuStock(context.Context, *SkuStockReq, *StockNumReply) error
	/// 获取spu下所有sku库存数量
	GetSpuStock(context.Context, *SpuStockReq, *SkuStockNum) error
	/// 锁定sku库存
	SKuStockLock(context.Context, *SkuStockLockReq, *emptypb.Empty) error
	/// 解锁sku库存
	SkuStockUnlock(context.Context, *SkuStockUnlockReq, *emptypb.Empty) error
}

func RegisterWarehouseHandler(s server.Server, hdlr WarehouseHandler, opts ...server.HandlerOption) error {
	type warehouse interface {
		GetSkuStock(ctx context.Context, in *SkuStockReq, out *StockNumReply) error
		GetSpuStock(ctx context.Context, in *SpuStockReq, out *SkuStockNum) error
		SKuStockLock(ctx context.Context, in *SkuStockLockReq, out *emptypb.Empty) error
		SkuStockUnlock(ctx context.Context, in *SkuStockUnlockReq, out *emptypb.Empty) error
	}
	type Warehouse struct {
		warehouse
	}
	h := &warehouseHandler{hdlr}
	return s.Handle(s.NewHandler(&Warehouse{h}, opts...))
}

type warehouseHandler struct {
	WarehouseHandler
}

func (h *warehouseHandler) GetSkuStock(ctx context.Context, in *SkuStockReq, out *StockNumReply) error {
	return h.WarehouseHandler.GetSkuStock(ctx, in, out)
}

func (h *warehouseHandler) GetSpuStock(ctx context.Context, in *SpuStockReq, out *SkuStockNum) error {
	return h.WarehouseHandler.GetSpuStock(ctx, in, out)
}

func (h *warehouseHandler) SKuStockLock(ctx context.Context, in *SkuStockLockReq, out *emptypb.Empty) error {
	return h.WarehouseHandler.SKuStockLock(ctx, in, out)
}

func (h *warehouseHandler) SkuStockUnlock(ctx context.Context, in *SkuStockUnlockReq, out *emptypb.Empty) error {
	return h.WarehouseHandler.SkuStockUnlock(ctx, in, out)
}
