// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: warehouse/warehouse.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SkuStockReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuStockReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuStockReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SkuStockReqMultiError, or
// nil if none found.
func (m *SkuStockReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuStockReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSkuId() <= 0 {
		err := SkuStockReqValidationError{
			field:  "SkuId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SkuStockReqMultiError(errors)
	}
	return nil
}

// SkuStockReqMultiError is an error wrapping multiple validation errors
// returned by SkuStockReq.ValidateAll() if the designated constraints aren't met.
type SkuStockReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuStockReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuStockReqMultiError) AllErrors() []error { return m }

// SkuStockReqValidationError is the validation error returned by
// SkuStockReq.Validate if the designated constraints aren't met.
type SkuStockReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuStockReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuStockReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuStockReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuStockReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuStockReqValidationError) ErrorName() string { return "SkuStockReqValidationError" }

// Error satisfies the builtin error interface
func (e SkuStockReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuStockReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuStockReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuStockReqValidationError{}

// Validate checks the field values on SpuStockReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpuStockReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuStockReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpuStockReqMultiError, or
// nil if none found.
func (m *SpuStockReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuStockReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSpuId() <= 0 {
		err := SpuStockReqValidationError{
			field:  "SpuId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetSkuIds()) < 1 {
		err := SpuStockReqValidationError{
			field:  "SkuIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SpuStockReqMultiError(errors)
	}
	return nil
}

// SpuStockReqMultiError is an error wrapping multiple validation errors
// returned by SpuStockReq.ValidateAll() if the designated constraints aren't met.
type SpuStockReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuStockReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuStockReqMultiError) AllErrors() []error { return m }

// SpuStockReqValidationError is the validation error returned by
// SpuStockReq.Validate if the designated constraints aren't met.
type SpuStockReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuStockReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuStockReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuStockReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuStockReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuStockReqValidationError) ErrorName() string { return "SpuStockReqValidationError" }

// Error satisfies the builtin error interface
func (e SpuStockReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuStockReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuStockReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuStockReqValidationError{}

// Validate checks the field values on SkuStockLockReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SkuStockLockReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuStockLockReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SkuStockLockReqMultiError, or nil if none found.
func (m *SkuStockLockReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuStockLockReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := SkuStockLockReqValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrderNo()) < 3 {
		err := SkuStockLockReqValidationError{
			field:  "OrderNo",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetConsignee()) < 2 {
		err := SkuStockLockReqValidationError{
			field:  "Consignee",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPhone()) < 3 {
		err := SkuStockLockReqValidationError{
			field:  "Phone",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 3 {
		err := SkuStockLockReqValidationError{
			field:  "Address",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Note

	if len(m.GetSkuNum()) < 1 {
		err := SkuStockLockReqValidationError{
			field:  "SkuNum",
			reason: "value must contain at least 1 pair(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SkuStockLockReqMultiError(errors)
	}
	return nil
}

// SkuStockLockReqMultiError is an error wrapping multiple validation errors
// returned by SkuStockLockReq.ValidateAll() if the designated constraints
// aren't met.
type SkuStockLockReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuStockLockReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuStockLockReqMultiError) AllErrors() []error { return m }

// SkuStockLockReqValidationError is the validation error returned by
// SkuStockLockReq.Validate if the designated constraints aren't met.
type SkuStockLockReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuStockLockReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuStockLockReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuStockLockReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuStockLockReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuStockLockReqValidationError) ErrorName() string { return "SkuStockLockReqValidationError" }

// Error satisfies the builtin error interface
func (e SkuStockLockReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuStockLockReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuStockLockReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuStockLockReqValidationError{}

// Validate checks the field values on SkuStockUnlockReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SkuStockUnlockReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuStockUnlockReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SkuStockUnlockReqMultiError, or nil if none found.
func (m *SkuStockUnlockReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuStockUnlockReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := SkuStockUnlockReqValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Finish

	if len(errors) > 0 {
		return SkuStockUnlockReqMultiError(errors)
	}
	return nil
}

// SkuStockUnlockReqMultiError is an error wrapping multiple validation errors
// returned by SkuStockUnlockReq.ValidateAll() if the designated constraints
// aren't met.
type SkuStockUnlockReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuStockUnlockReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuStockUnlockReqMultiError) AllErrors() []error { return m }

// SkuStockUnlockReqValidationError is the validation error returned by
// SkuStockUnlockReq.Validate if the designated constraints aren't met.
type SkuStockUnlockReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuStockUnlockReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuStockUnlockReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuStockUnlockReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuStockUnlockReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuStockUnlockReqValidationError) ErrorName() string {
	return "SkuStockUnlockReqValidationError"
}

// Error satisfies the builtin error interface
func (e SkuStockUnlockReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuStockUnlockReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuStockUnlockReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuStockUnlockReqValidationError{}

// Validate checks the field values on StockNumReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StockNumReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StockNumReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StockNumReplyMultiError, or
// nil if none found.
func (m *StockNumReply) ValidateAll() error {
	return m.validate(true)
}

func (m *StockNumReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Num

	if len(errors) > 0 {
		return StockNumReplyMultiError(errors)
	}
	return nil
}

// StockNumReplyMultiError is an error wrapping multiple validation errors
// returned by StockNumReply.ValidateAll() if the designated constraints
// aren't met.
type StockNumReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StockNumReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StockNumReplyMultiError) AllErrors() []error { return m }

// StockNumReplyValidationError is the validation error returned by
// StockNumReply.Validate if the designated constraints aren't met.
type StockNumReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StockNumReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StockNumReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StockNumReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StockNumReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StockNumReplyValidationError) ErrorName() string { return "StockNumReplyValidationError" }

// Error satisfies the builtin error interface
func (e StockNumReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStockNumReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StockNumReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StockNumReplyValidationError{}

// Validate checks the field values on SkuStockNum with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuStockNum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuStockNum with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SkuStockNumMultiError, or
// nil if none found.
func (m *SkuStockNum) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuStockNum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SkuNum

	if len(errors) > 0 {
		return SkuStockNumMultiError(errors)
	}
	return nil
}

// SkuStockNumMultiError is an error wrapping multiple validation errors
// returned by SkuStockNum.ValidateAll() if the designated constraints aren't met.
type SkuStockNumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuStockNumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuStockNumMultiError) AllErrors() []error { return m }

// SkuStockNumValidationError is the validation error returned by
// SkuStockNum.Validate if the designated constraints aren't met.
type SkuStockNumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuStockNumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuStockNumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuStockNumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuStockNumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuStockNumValidationError) ErrorName() string { return "SkuStockNumValidationError" }

// Error satisfies the builtin error interface
func (e SkuStockNumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuStockNum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuStockNumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuStockNumValidationError{}
