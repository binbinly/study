/**
 * 仓储服务
 */
syntax = "proto3";

package warehouse;

option go_package = "./proto;common";

import "google/protobuf/empty.proto";
import "global/validate/validate.proto";

/**
 * 内部服务
 * 仓储服务接口定义
 */
service Warehouse {
  /// 获取sku库存数量
  rpc GetSkuStock(SkuStockReq) returns (StockNumReply);
  /// 获取spu下所有sku库存数量
  rpc GetSpuStock(SpuStockReq) returns (SkuStockNum);
  /// 锁定sku库存
  rpc SKuStockLock(SkuStockLockReq) returns (google.protobuf.Empty);
  /// 解锁sku库存
  rpc SkuStockUnlock(SkuStockUnlockReq) returns (google.protobuf.Empty);
}

// sku库存请求结构
message SkuStockReq {
  int64 sku_id = 1 [(validate.rules).int64.gt = 0]; /// sku_id
}

// spu库存请求结构
message SpuStockReq {
  int64 spu_id = 1 [(validate.rules).int64.gt = 0]; /// spu_id
  repeated int64 sku_ids = 2 [(validate.rules).repeated.min_items = 1]; /// sku_id
}

//锁定库存请求结构
message SkuStockLockReq {
  int64 order_id = 1 [(validate.rules).int64.gt = 0];
  string order_no = 2 [(validate.rules).string.min_len = 3];  //订单号
  string consignee = 3 [(validate.rules).string.min_len = 2]; // 收货人
  string phone = 4 [(validate.rules).string.min_len = 3]; //收货人手机号
  string address = 5 [(validate.rules).string.min_len = 3]; //收货地址
  string note = 6;  // 订单备注
  map<int64, int32> sku_num = 7 [(validate.rules).map.min_pairs = 1]; /// sku_id => 库存数量
}

//解锁库存请求结构
message SkuStockUnlockReq {
  int64 order_id = 1 [(validate.rules).int64.gt = 0]; //订单id
  bool finish = 2; // 订单是否已完成
}

// 库存数量响应结构
message StockNumReply {
  int32 num = 1; /// 库存数量
}

// sku库存数量map结构
message SkuStockNum {
  map<int64, int32> sku_num = 1; /// sku_id => 库存数量
}